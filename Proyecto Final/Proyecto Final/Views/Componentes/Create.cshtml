


<link href="~/css/colors.css" rel="stylesheet" />
<link href="~/css/bootstrap.min.css" rel="stylesheet" />
<link rel="stylesheet" href="style.css">
<link href="~/css/versions.css" rel="stylesheet" />
<link href="~/css/responsive.css" rel="stylesheet" />
<link href="~/css/custom.css" rel="stylesheet" />
<link href="~/css/style.css" rel="stylesheet" />
<body class="barber_version">

    <div id="wrapper">

        <!-- Sidebar-wrapper -->
        <div id="sidebar-wrapper">
            <div class="side-top">
                <div class="logo-sidebar">
                    Pc
                </div>
                <ul class="sidebar-nav">
                    <li>@Html.ActionLink("Clientes", "Index", "Clientes")</li>
                    <li>@Html.ActionLink("Computadoras", "Index", "Computadoras")</li>
                    <li>@Html.ActionLink("Componentes", "Index", "Componentes")</li>
                    <li>@Html.ActionLink("Facturas", "Index", "Facturas")</li>
                </ul>
            </div>
        </div><!-- End Sidebar-wrapper -->
        <!-- Page Content -->
        <div id="page-content-wrapper">



            @model Proyecto_Final.Models.Componentes

            @{
                ViewBag.Title = "Create";
            }

            <h2>Crear</h2>


            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <h4>Componentes</h4>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.ComputadoraID, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ComputadoraID, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ComputadoraID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Microprocesador, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Microprocesador, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Microprocesador, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Ram, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Ram, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Ram, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.PlacaMadre, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.PlacaMadre, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PlacaMadre, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Almacenamiento, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Almacenamiento, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Almacenamiento, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.TarjetaVideo, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.TarjetaVideo, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.TarjetaVideo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Gabinete, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Gabinete, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Gabinete, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.FuenteDePoder, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.FuenteDePoder, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FuenteDePoder, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Crear" class="btn btn-success" />
                        </div>
                    </div>
                </div>
            }

            <div>
                @Html.ActionLink("Regresar a la lista", "Index")
            </div>

            @section Scripts {
                @Scripts.Render("~/bundles/jqueryval")
            }
        </div><!-- end wrapper -->

        <a href="#" id="scroll-to-top" class="dmtop global-radius"><i class="fa fa-angle-up"></i></a>

        <!-- ALL JS FILES -->
        <script src="~/js/all.js"></script>
        <script src="~/js/responsive-tabs.js"></script>
        <script src="~/js/custom.js"></script>

        <!-- Menu Toggle Script -->
        <script>
            (function ($) {
                "use strict";
                $("#menu-toggle").click(function (e) {
                    e.preventDefault();
                    $("#wrapper").toggleClass("toggled");
                });
                smoothScroll.init({
                    selector: '[data-scroll]', // Selector for links (must be a class, ID, data attribute, or element tag)
                    selectorHeader: null, // Selector for fixed headers (must be a valid CSS selector) [optional]
                    speed: 500, // Integer. How fast to complete the scroll in milliseconds
                    easing: 'easeInOutCubic', // Easing pattern to use
                    offset: 0, // Integer. How far to offset the scrolling anchor location in pixels
                    callback: function (anchor, toggle) { } // Function to run after scrolling
                });
            })(jQuery);
        </script>
    </div>
</body>